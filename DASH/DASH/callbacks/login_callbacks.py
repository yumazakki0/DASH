# callbacks/login_callbacks.py
# Este m√≥dulo lida com a autentica√ß√£o de usu√°rios (login) e cria√ß√£o do usu√°rio padr√£o.
# Ele verifica credenciais armazenadas em um CSV e permite criar um usu√°rio inicial "admin".

import pandas as pd                     # Manipula√ß√£o de dados (CSV -> DataFrame)
from callbacks.common import USUARIOS_CSV  # Caminho do arquivo CSV de usu√°rios
import os                               # Para verificar exist√™ncia de arquivos
from dash import Input, Output, State   # Para futuros callbacks no Dash
import dash_bootstrap_components as dbc # Mensagens de feedback (alerts, etc)
from app import app                     # Inst√¢ncia principal do aplicativo Dash
from layouts.login_layout import build_login_layout  # Layout do login (formul√°rio de autentica√ß√£o)

def validar_login(usuario, senha):
    """
    Verifica se o usu√°rio e senha informados existem no CSV de usu√°rios.
    
    - L√™ o arquivo usuarios.csv
    - Normaliza os dados (remove espa√ßos extras e converte para string)
    - Compara o usu√°rio e senha fornecidos com os registros
    - Retorna True se as credenciais forem v√°lidas, False caso contr√°rio
    """

    import pandas as pd
    from callbacks.common import USUARIOS_CSV

    # Se n√£o existir o CSV de usu√°rios, n√£o h√° como autenticar
    if not os.path.exists(USUARIOS_CSV):
        print("CSV n√£o existe:", USUARIOS_CSV)
        return False

    # L√™ os dados dos usu√°rios
    df = pd.read_csv(USUARIOS_CSV)

    # Normaliza os dados: garante que s√£o strings e remove espa√ßos extras
    df['usuario'] = df['usuario'].astype(str).str.strip()
    df['senha'] = df['senha'].astype(str).str.strip()

    # Tamb√©m normaliza a entrada do usu√°rio
    usuario = str(usuario).strip()
    senha = str(senha).strip()

    # Verifica se h√° correspond√™ncia no CSV
    match = df[(df['usuario'] == usuario) & (df['senha'] == senha)]
    print("Match:", match)  # (debug) imprime a linha encontrada
    return not match.empty  # True se encontrou usu√°rio v√°lido, False caso contr√°rio


def criar_usuario_se_nao_existe():
    """
    Cria usu√°rio padr√£o 'admin' com senha '1234' caso o arquivo usuarios.csv n√£o exista.
    Isso garante que sempre exista pelo menos um login v√°lido para acessar o sistema.
    """
    if not os.path.exists(USUARIOS_CSV):
        # Cria DataFrame com usu√°rio padr√£o
        df = pd.DataFrame([{'usuario': 'admin', 'senha': '1234'}])
        # Salva no arquivo CSV
        df.to_csv(USUARIOS_CSV, index=False)


# üîë Callback do login
# Observa√ß√£o: foi movido para o index.py (ou outro m√≥dulo central do app),
# para evitar depend√™ncia circular e facilitar organiza√ß√£o do fluxo de autentica√ß√£o.
